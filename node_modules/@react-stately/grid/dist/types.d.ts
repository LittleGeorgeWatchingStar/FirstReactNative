import { GridCollection as _GridCollection1, GridNode, GridRow } from "@react-types/grid";
import { Key } from "react";
import { MultipleSelection } from "@react-types/shared";
import { SelectionManager } from "@react-stately/selection";
export interface GridState<T, C extends _GridCollection1<T>> {
    collection: C;
    /** A set of keys for rows that are disabled. */
    disabledKeys: Set<Key>;
    /** A selection manager to read and update row selection state. */
    selectionManager: SelectionManager;
}
interface GridStateOptions<T, C extends _GridCollection1<T>> extends MultipleSelection {
    collection: C;
    disabledKeys?: Iterable<Key>;
    focusMode?: 'row' | 'cell';
}
/**
 * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.
 */
export function useGridState<T extends object, C extends _GridCollection1<T>>(props: GridStateOptions<T, C>): GridState<T, C>;
interface GridCollectionOptions<T> {
    columnCount: number;
    items: GridRow<T>[];
    visitNode?: (cell: GridNode<T>) => GridNode<T>;
}
export class GridCollection<T> implements _GridCollection1<T> {
    keyMap: Map<Key, GridNode<T>>;
    columnCount: number;
    rows: GridNode<T>[];
    constructor(opts?: GridCollectionOptions<T>);
    [Symbol.iterator](): Generator<GridNode<T>, void, undefined>;
    get size(): number;
    getKeys(): IterableIterator<string | number>;
    getKeyBefore(key: Key): string | number;
    getKeyAfter(key: Key): string | number;
    getFirstKey(): string | number;
    getLastKey(): string | number;
    getItem(key: Key): GridNode<T>;
    at(idx: number): GridNode<T>;
}

//# sourceMappingURL=types.d.ts.map
