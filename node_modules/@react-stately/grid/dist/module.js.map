{"mappings":";;;;AAmBA;;;OAGO,SAASA,YAAT,CAAqEC,KAArE,EAAqH;AAC1H,MAAI;AAACC,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAA0BF,KAA9B;AACA,MAAIG,cAAc,GAAGC,yBAAyB,CAACJ,KAAD,CAA9C;AACA,MAAIK,YAAY,GAAGC,OAAO,CAAC,MACvBN,KAAK,CAACK,YAAN,GAAqB,IAAIE,GAAJ,CAAQP,KAAK,CAACK,YAAd,CAArB,GAAmD,IAAIE,GAAJ,EAD7B,EAEtB,CAACP,KAAK,CAACK,YAAP,CAFsB,CAA1B;AAIA,MAAIG,aAAa,GAAGL,cAAc,CAACK,aAAnC;;AACAL,EAAAA,cAAc,CAACK,aAAf,GAA+B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC7C;AACA,QAAIR,SAAS,KAAK,MAAd,IAAwBO,GAAG,IAAI,IAAnC,EAAyC;AACvC,UAAIE,IAAI,GAAGV,UAAU,CAACW,OAAX,CAAmBH,GAAnB,CAAX;;AACA,UAAI,CAAAE,IAAI,QAAJ,YAAAA,IAAI,CAAEE,IAAN,MAAe,MAAnB,EAA2B;AACzB,YAAIC,QAAQ,GAAG,CAAC,GAAGH,IAAI,CAACI,UAAT,CAAf;;AACA,YAAIL,KAAK,KAAK,MAAd,EAAsB;AAAA;;AACpBD,UAAAA,GAAG,gBAAGK,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAX,qBAAG,UAA+BP,GAArC;AACD,SAFD,MAEO;AAAA;;AACLA,UAAAA,GAAG,iBAAGK,QAAQ,CAAC,CAAD,CAAX,qBAAG,WAAaL,GAAnB;AACD;AACF;AACF;;AAEDD,IAAAA,aAAa,CAACC,GAAD,EAAMC,KAAN,CAAb;AACD,GAfD,CAR0H,CAyB1H;;;AACAO,EAAAA,SAAS,CAAC,MAAM;AACd,QAAId,cAAc,CAACe,UAAf,IAA6B,IAA7B,IAAqC,CAACjB,UAAU,CAACW,OAAX,CAAmBT,cAAc,CAACe,UAAlC,CAA1C,EAAyF;AACvFf,MAAAA,cAAc,CAACK,aAAf,CAA6B,IAA7B;AACD;AACF,GAJQ,EAIN,CAACP,UAAD,EAAaE,cAAc,CAACe,UAA5B,CAJM,CAAT;AAMA,SAAO;AACLjB,IAAAA,UADK;AAELI,IAAAA,YAFK;AAGLc,IAAAA,gBAAgB,EAAE,IAAIC,gBAAJ,CAAqBnB,UAArB,EAAiCE,cAAjC;AAHb,GAAP;AAKD;;yDC2DGkB,MAAM,CAACC,Q;;AAtHX;;;;;;;;;;;OAqBO,MAAMC,cAAN,CAAsD;AAK3DC,EAAAA,WAAW,CAACC,IAAD,EAAkC;AAAA,SAJ7CC,MAI6C,GAJb,IAAIC,GAAJ,EAIa;AAAA,SAH7CC,WAG6C;AAAA,SAF7CC,IAE6C;AAC3C,SAAKH,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,SAAKC,WAAL,GAAmBH,IAAnB,oBAAmBA,IAAI,CAAEG,WAAzB;AACA,SAAKC,IAAL,GAAY,EAAZ;;AAEA,QAAIC,KAAK,GAAIC,IAAD,IAAuB;AACjC;AACA;AACA;AACA,UAAIC,QAAQ,GAAG,KAAKN,MAAL,CAAYO,GAAZ,CAAgBF,IAAI,CAACtB,GAArB,CAAf;;AACA,UAAIgB,IAAI,CAACS,SAAT,EAAoB;AAClBH,QAAAA,IAAI,GAAGN,IAAI,CAACS,SAAL,CAAeH,IAAf,CAAP;AACD;;AAED,WAAKL,MAAL,CAAYS,GAAZ,CAAgBJ,IAAI,CAACtB,GAArB,EAA0BsB,IAA1B;AAEA,UAAIK,SAAS,GAAG,IAAI7B,GAAJ,EAAhB;AACA,UAAI8B,IAAJ;;AACA,WAAK,IAAI3B,KAAT,IAAkBqB,IAAI,CAAChB,UAAvB,EAAmC;AACjC,YAAIL,KAAK,CAACG,IAAN,KAAe,MAAf,IAAyBH,KAAK,CAAC4B,SAAN,IAAmB,IAAhD,EAAsD;AACpD;AACA5B,UAAAA,KAAK,CAAC4B,SAAN,GAAkBP,IAAI,CAACtB,GAAvB;AACD;;AACD2B,QAAAA,SAAS,CAACG,GAAV,CAAc7B,KAAK,CAACD,GAApB;;AAEA,YAAI4B,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAACG,OAAL,GAAe9B,KAAK,CAACD,GAArB;AACAC,UAAAA,KAAK,CAAC+B,OAAN,GAAgBJ,IAAI,CAAC5B,GAArB;AACD,SAHD,MAGO;AACLC,UAAAA,KAAK,CAAC+B,OAAN,GAAgB,IAAhB;AACD;;AAEDX,QAAAA,KAAK,CAACpB,KAAD,CAAL;AACA2B,QAAAA,IAAI,GAAG3B,KAAP;AACD;;AAED,UAAI2B,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACG,OAAL,GAAe,IAAf;AACD,OAjCgC,CAmCjC;;;AACA,UAAIR,QAAJ,EAAc;AACZ,aAAK,IAAItB,KAAT,IAAkBsB,QAAQ,CAACjB,UAA3B,EAAuC;AACrC,cAAI,CAACqB,SAAS,CAACM,GAAV,CAAchC,KAAK,CAACD,GAApB,CAAL,EAA+B;AAC7BkC,YAAAA,MAAM,CAACjC,KAAD,CAAN;AACD;AACF;AACF;AACF,KA3CD;;AA6CA,QAAIiC,MAAM,GAAIZ,IAAD,IAAuB;AAClC,WAAKL,MAAL,CAAYkB,MAAZ,CAAmBb,IAAI,CAACtB,GAAxB;;AACA,WAAK,IAAIC,KAAT,IAAkBqB,IAAI,CAAChB,UAAvB,EAAmC;AACjC,YAAI,KAAKW,MAAL,CAAYO,GAAZ,CAAgBvB,KAAK,CAACD,GAAtB,MAA+BC,KAAnC,EAA0C;AACxCiC,UAAAA,MAAM,CAACjC,KAAD,CAAN;AACD;AACF;AACF,KAPD;;AASA,QAAI2B,IAAJ;AACAZ,IAAAA,IAAI,CAACoB,KAAL,CAAWC,OAAX,CAAmB,CAACf,IAAD,EAAOgB,CAAP,KAAa;AAC9B,UAAIC,OAAO;AACTC,QAAAA,KAAK,EAAE,CADE;AAETxC,QAAAA,GAAG,EAAE,SAASsC,CAFL;AAGTlC,QAAAA,IAAI,EAAE,KAHG;AAITqC,QAAAA,KAAK,EAAEC,SAJE;AAKTC,QAAAA,aAAa,EAAE,IALN;AAMTrC,QAAAA,UAAU,EAAE,CAAC,GAAGgB,IAAI,CAAChB,UAAT,CANH;AAOTsC,QAAAA,QAAQ,EAAEF,SAPD;AAQTG,QAAAA,SAAS,EAAEH;AARF,SASNpB,IATM;AAUTwB,QAAAA,KAAK,EAAER;AAVE,QAAX;;AAaA,UAAIV,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACG,OAAL,GAAeQ,OAAO,CAACvC,GAAvB;AACAuC,QAAAA,OAAO,CAACP,OAAR,GAAkBJ,IAAI,CAAC5B,GAAvB;AACD,OAHD,MAGO;AACLuC,QAAAA,OAAO,CAACP,OAAR,GAAkB,IAAlB;AACD;;AAED,WAAKZ,IAAL,CAAU2B,IAAV,CAAeR,OAAf;AACAlB,MAAAA,KAAK,CAACkB,OAAD,CAAL;AAEAX,MAAAA,IAAI,GAAGW,OAAP;AACD,KAzBD;;AA2BA,QAAIX,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACG,OAAL,GAAe,IAAf;AACD;AACF;;AAED,8DAAqB;AACnB,WAAO,CAAC,GAAG,KAAKX,IAAT,CAAP;AACD;;AAED,MAAI4B,IAAJ,GAAW;AACT,WAAO,CAAC,GAAG,KAAK5B,IAAT,EAAeb,MAAtB;AACD;;AAED0C,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKhC,MAAL,CAAYiC,IAAZ,EAAP;AACD;;AAEDC,EAAAA,YAAY,CAACnD,GAAD,EAAW;AACrB,QAAIsB,IAAI,GAAG,KAAKL,MAAL,CAAYO,GAAZ,CAAgBxB,GAAhB,CAAX;AACA,WAAOsB,IAAI,GAAGA,IAAI,CAACU,OAAR,GAAkB,IAA7B;AACD;;AAEDoB,EAAAA,WAAW,CAACpD,GAAD,EAAW;AACpB,QAAIsB,IAAI,GAAG,KAAKL,MAAL,CAAYO,GAAZ,CAAgBxB,GAAhB,CAAX;AACA,WAAOsB,IAAI,GAAGA,IAAI,CAACS,OAAR,GAAkB,IAA7B;AACD;;AAEDsB,EAAAA,WAAW,GAAG;AAAA;;AACZ,gBAAO,CAAC,GAAG,KAAKjC,IAAT,EAAe,CAAf,CAAP,qBAAO,EAAmBpB,GAA1B;AACD;;AAEDsD,EAAAA,UAAU,GAAG;AAAA;;AACX,QAAIlC,IAAI,GAAG,CAAC,GAAG,KAAKA,IAAT,CAAX;AACA,oBAAOA,IAAI,CAACA,IAAI,CAACb,MAAL,GAAc,CAAf,CAAX,qBAAO,MAAuBP,GAA9B;AACD;;AAEDG,EAAAA,OAAO,CAACH,GAAD,EAAW;AAChB,WAAO,KAAKiB,MAAL,CAAYO,GAAZ,CAAgBxB,GAAhB,CAAP;AACD;;AAEDuD,EAAAA,EAAE,CAACC,GAAD,EAAc;AACd,UAAMN,IAAI,GAAG,CAAC,GAAG,KAAKD,OAAL,EAAJ,CAAb;AACA,WAAO,KAAK9C,OAAL,CAAa+C,IAAI,CAACM,GAAD,CAAjB,CAAP;AACD;;AAvI0D","sources":["./packages/@react-stately/grid/src/useGridState.ts","./packages/@react-stately/grid/src/GridCollection.ts"],"sourcesContent":["import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelection} from '@react-types/shared';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager\n}\n\ninterface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelection {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"],"names":["useGridState","props","collection","focusMode","selectionState","useMultipleSelectionState","disabledKeys","useMemo","Set","setFocusedKey","key","child","item","getItem","type","children","childNodes","length","useEffect","focusedKey","selectionManager","SelectionManager","Symbol","iterator","GridCollection","constructor","opts","keyMap","Map","columnCount","rows","visit","node","prevNode","get","visitNode","set","childKeys","last","parentKey","add","nextKey","prevKey","has","remove","delete","items","forEach","i","rowNode","level","value","undefined","hasChildNodes","rendered","textValue","index","push","size","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","getLastKey","at","idx"],"version":3,"file":"module.js.map"}